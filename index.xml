<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Polyglott</title>
    <link>https://ottogiron.github.io/</link>
    <description>Recent content on Polyglott</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-EN</language>
    <managingEditor>ottog2486@gmail.com (Otto Giron)</managingEditor>
    <webMaster>ottog2486@gmail.com (Otto Giron)</webMaster>
    <copyright>(c) 2015 Otto Giron.</copyright>
    <lastBuildDate>Wed, 23 Dec 2015 21:26:11 -0600</lastBuildDate>
    
	<atom:link href="https://ottogiron.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Chapi Go Toy Web Framework</title>
      <link>https://ottogiron.github.io/2015/12/23/chapi-go-toy-web-framework/</link>
      <pubDate>Wed, 23 Dec 2015 21:26:11 -0600</pubDate>
      <author>ottog2486@gmail.com (Otto Giron)</author>
      <guid>https://ottogiron.github.io/2015/12/23/chapi-go-toy-web-framework/</guid>
      <description>&lt;p&gt;On my quest of learning I heard about this relatively new language called &lt;a href=&#34;https://golang.org/&#34;&gt;go&lt;/a&gt;. I don&amp;rsquo;t remember well the details of why I had the desire of learning it, but as I normally do in order to learn a new language or tool, I write code to test the features and get an overview of what I can accomplish using it and&amp;hellip; I also read the first chapters of this book: &lt;a href=&#34;http://www.amazon.com/Programming-Go-Creating-Applications-Developers/dp/0321774639&#34;&gt;Programing in go&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Terraform with DigitalOcean</title>
      <link>https://ottogiron.github.io/2015/12/15/using-terraform-with-digitalocean/</link>
      <pubDate>Tue, 15 Dec 2015 21:25:39 -0600</pubDate>
      <author>ottog2486@gmail.com (Otto Giron)</author>
      <guid>https://ottogiron.github.io/2015/12/15/using-terraform-with-digitalocean/</guid>
      <description>&lt;p&gt;In this post I&amp;rsquo;m going to use &lt;a href=&#34;https://terraform.io/&#34;&gt;Terraform&lt;/a&gt; to define and launch a &lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;DigitalOcean&lt;/a&gt; server and a DNS &lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;DigitalOcean&lt;/a&gt; A Record.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Weaselpecker v1.1.0 released and available on NPM</title>
      <link>https://ottogiron.github.io/2015/08/05/weaselpecker-v1-1-0-released-and-available-on-npm/</link>
      <pubDate>Thu, 06 Aug 2015 00:00:00 +0000</pubDate>
      <author>ottog2486@gmail.com (Otto Giron)</author>
      <guid>https://ottogiron.github.io/2015/08/05/weaselpecker-v1-1-0-released-and-available-on-npm/</guid>
      <description>I few months ago I wrote a little module for mocking Waterline models, you can check my related post here &amp;#8220;Weaselpecker: Node.js- Waterline Simple Mocking Library&amp;#8221;.
It seems the module was useful for some developers (which is great ðŸ˜€ ) so I took a few hours to review my code and add a couple extra features.
I&amp;#8217;ve released v1.1.0 which is available on NPM https://www.npmjs.com/package/weaselpecker.
Installation
npm install weaselpecker --save-dev  Examples here https://github.</description>
    </item>
    
    <item>
      <title>Managing your JavaScript Dependencies with RequireJS</title>
      <link>https://ottogiron.github.io/2015/05/10/managing-your-javascript-dependencies-with-requirejs/</link>
      <pubDate>Sun, 10 May 2015 00:00:00 +0000</pubDate>
      <author>ottog2486@gmail.com (Otto Giron)</author>
      <guid>https://ottogiron.github.io/2015/05/10/managing-your-javascript-dependencies-with-requirejs/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://requirejs.org/&#34; target=&#34;_blank&#34;&gt;RequireJS&lt;/a&gt; is a module loader for JavaScript. RequiresJS is based on the &lt;a href=&#34;http://en.wikipedia.org/wiki/Asynchronous_module_definition&#34; target=&#34;_blank&#34;&gt;AMD&lt;/a&gt; (Asyncronous Module Definition) API specification, which provides a mechanism for defining and consuming modules. When you require or use a module, it will be retrieved asynchronously and cached at the time you need it, that improves performance since you don&amp;#8217;t need to load all your dependencies (JavaScript files) at the same time.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Node.js Modeshape REST Client</title>
      <link>https://ottogiron.github.io/2015/04/12/node-js-modeshape-rest-client/</link>
      <pubDate>Sun, 12 Apr 2015 00:00:00 +0000</pubDate>
      <author>ottog2486@gmail.com (Otto Giron)</author>
      <guid>https://ottogiron.github.io/2015/04/12/node-js-modeshape-rest-client/</guid>
      <description>&lt;h2 id=&#34;modeshape&#34;&gt;Modeshape&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://modeshape.jboss.org/&#34; target=&#34;_blank&#34;&gt;Modeshape&lt;/a&gt; is an hierarchical data store written in Java and is part of the &lt;a href=&#34;http://www.jboss.org&#34; target=&#34;_blank&#34;&gt;JBoss&lt;/a&gt; portfolio . ModeShape clients are based on  &lt;a href =&#34;https://www.jcp.org/en/jsr/detail?id=283&#34; target=&#34;_blank&#34;&gt;JSR 283&lt;/a&gt; also known as JCR (Java Content Repository). There&amp;#8217;s another popular implementation of JCR called &lt;a href=&#34;http://jackrabbit.apache.org/jcr/index.html&#34; title=&#34;Jackrabbit&#34; target=&#34;_blank&#34;&gt;Jackrabbit&lt;/a&gt;, part of the Apache Software Foundation.&lt;/p&gt;

&lt;p&gt;Content Repositories such ModeShape are great for data organized in a tree like structure such Content Management Systems, Digital Assets Managers, Document Management Systems, Social Collaboration Systems etc.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Node.js Code Coverage with Istanbul and Mocha</title>
      <link>https://ottogiron.github.io/2015/03/29/node-js-code-coverage-with-istanbul-and-mocha/</link>
      <pubDate>Mon, 30 Mar 2015 00:00:00 +0000</pubDate>
      <author>ottog2486@gmail.com (Otto Giron)</author>
      <guid>https://ottogiron.github.io/2015/03/29/node-js-code-coverage-with-istanbul-and-mocha/</guid>
      <description>&lt;p&gt;Code coverage is a measure of how much of your code has beenÂ  tested. Code coverage tools run a set of metrics in order to determine if your code has been completely tested, reducing the chance ofÂ  unwanted bugs.&lt;/p&gt;

&lt;p&gt;You have to take into account that even if your code has 100% code coverage, that doesn&amp;#8217;t guarantee all your tests are correct, there are some logical bugs you might miss, but as with anything, practice will help you with that.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Setting Up your Node.js Unit Tests with Chai And Mocha</title>
      <link>https://ottogiron.github.io/2015/03/22/setting-up-your-node-js-unit-tests-with-chai-and-mocha/</link>
      <pubDate>Mon, 23 Mar 2015 00:00:00 +0000</pubDate>
      <author>ottog2486@gmail.com (Otto Giron)</author>
      <guid>https://ottogiron.github.io/2015/03/22/setting-up-your-node-js-unit-tests-with-chai-and-mocha/</guid>
      <description>&lt;p&gt;In this post I&amp;#8217;m going to list the steps for setting up a Node.js project with unit testing.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Waterline: Node.js adapter-based ORM</title>
      <link>https://ottogiron.github.io/2015/03/16/waterline-node-js-adapter-based-orm/</link>
      <pubDate>Mon, 16 Mar 2015 00:00:00 +0000</pubDate>
      <author>ottog2486@gmail.com (Otto Giron)</author>
      <guid>https://ottogiron.github.io/2015/03/16/waterline-node-js-adapter-based-orm/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/balderdashy/waterline&#34;&gt;Waterline&lt;/a&gt; is an ORM/ODM (Object Document Mapper), part of the &lt;a href=&#34;http://sailsjs.org&#34;&gt;Sails Framework&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Waterline is agnostic of the data store so it allows you to map different types of databases to a common model structure, focusing on business logic for CURD operations, querying records and models relations mapping.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Weaselpecker: Node.js- Waterline Simple Mocking Library</title>
      <link>https://ottogiron.github.io/2015/03/08/weasel-node-js-waterline-simple-mocking-library/</link>
      <pubDate>Sun, 08 Mar 2015 00:00:00 +0000</pubDate>
      <author>ottog2486@gmail.com (Otto Giron)</author>
      <guid>https://ottogiron.github.io/2015/03/08/weasel-node-js-waterline-simple-mocking-library/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/ottogiron/weaselpecker&#34;&gt;Weaselpecker&lt;/a&gt; is a small nodejs module I wrote for mocking &lt;a href=&#34;https://github.com/balderdashy/waterline&#34;&gt;Waterline&lt;/a&gt; models. His name is inspired in the famous and beloved weasel woodpecker rider.&lt;/p&gt;

&lt;p style=&#34;text-align:center&#34;&gt;
  &lt;img src=&#34;http://i1.wp.com/res.cloudinary.com/dhilz8r88/image/upload/c_scale,w_354/v1425798498/cnn-weaslepecker_c9d7yf.jpg?w=474&#34; alt=&#34;alt WeaselPecker&#34; data-recalc-dims=&#34;1&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Web Components</title>
      <link>https://ottogiron.github.io/2015/03/07/web-components/</link>
      <pubDate>Sun, 08 Mar 2015 00:00:00 +0000</pubDate>
      <author>ottog2486@gmail.com (Otto Giron)</author>
      <guid>https://ottogiron.github.io/2015/03/07/web-components/</guid>
      <description>&lt;p&gt;Web components is a set of standards which brings technologies we were used to, but normally provided by frameworks or libraries such angular, ember, knockout (among others). Web Components standard natively supports in the web browser custom HTML elements, HTML imports and templates, also &amp;#8220;shadow DOM&amp;#8221; which extends the current DOM specification providing boundaries and better encapsulation between DOM trees.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Apache Thrift Java Server and NodeJS Client</title>
      <link>https://ottogiron.github.io/2014/07/20/apache-thrift-java-server-and-nodejs-client/</link>
      <pubDate>Mon, 21 Jul 2014 00:00:00 +0000</pubDate>
      <author>ottog2486@gmail.com (Otto Giron)</author>
      <guid>https://ottogiron.github.io/2014/07/20/apache-thrift-java-server-and-nodejs-client/</guid>
      <description>&lt;p&gt;As an exercise for learning &lt;a title=&#34; Apache Thrift&#34; href=&#34;https://thrift.apache.org/&#34; target=&#34;_blank&#34;&gt;Apache Thrift&lt;/a&gt;Â I&amp;#8217;m writing a simple API for &lt;a href=&#34;http://jackrabbit.apache.org/oak/&#34; target=&#34;_blank&#34;&gt;Apache Jackrabit 3&lt;/a&gt;Â using this software framework developed by Facebook. Â &lt;a title=&#34; Apache Thrift&#34; href=&#34;https://thrift.apache.org/&#34; target=&#34;_blank&#34;&gt;Apache Thrift&lt;/a&gt; is useful for writing cross-language services for many languages such Java, Python, PHP, JavaScript and others.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://ottogiron.github.io/about/</link>
      <pubDate>Thu, 24 Feb 2011 00:00:00 +0000</pubDate>
      <author>ottog2486@gmail.com (Otto Giron)</author>
      <guid>https://ottogiron.github.io/about/</guid>
      <description>I&amp;#8217;ve been a programmer since 2008, primarily in web development. Some of the languages I&amp;#8217;ve used are GO, JavaScript/Node, Java, C#, Visual Basic, PHP among others. I really enjoy learning new things and being informed about what&amp;#8217;s new. In my current Job I work as a DevOps/Infrastructure Engineer, even a really enjoy front end development and I do a lot of front end in my spare time.
In this blog I will write about anything in my daily living.</description>
    </item>
    
  </channel>
</rss>